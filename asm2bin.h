typedef enum{
LUI=10,AUIPC,
ADDI,SLTI,SLTIU,ANDI,ORI,XORI,SLLI,SRLI,SRAI,
ADD,SUB,SLT,SLTIU,AND,OR,XOR,SLL,SRL,SRA,
JAL,JALR,BEQ,BNE,BLT,BLTU,BGE,BGEU,
SB,SH,SW,SD,LB,LBU,LH,LHU,LW,LWU,LD,
ADDIW,SLLIW,SRLIW,SRAIW,ADDW,SUBW,SLLW,SRLW,SRAW,
FENCE,FENCE_I,LR_D,LR_W,SC_D,SC_W,
ECALL,EBREAK,CSRRW,CSRRS,CSRRC,CSRRWI,CSRRSI,CSRRCI,MRET,SRET,
AMOADD_D,AMOADD_W,AMOMAX_D,AMOMAX_W,AMOMAXU_D,AMOMAXU_W,AMOMIN_D,AMOMIN_W,AMOMINU_D,AMOMINU_W,AMOOR_D,AMOOR_W,AMOSWAP_D,AMOSWAP_W
,AMOXOR_D,AMOXOR_W,NOTHING
}INSTRUCTIONS;

const INSTRUCTIONS r_type_instructions[]={
ADD,ADDW,SUBW,SLLW,SRLW,SRAW,AND,AMOADD_D,AMOADD_W,AMOMAX_D,AMOMAX_W,AMOMAXU_D,AMOMAXU_W,AMOMIN_D,AMOMIN_W,AMOMINU_D,AMOMINU_W,AMOOR_D,AMOOR_W,AMOSWAP_D,AMOSWAP_W
,AMOXOR_D,AMOXOR_W,LR_D,LR_W,SC_D,SC_W
};

const INSTRUCTIONS u_type_instructions[]={
    LUI,AUIPC,
};

const INSTRUCTIONS i_type_instructions[]={
ADDI,SLTI,SLTIU,ANDI,ORI,XORI,SLLI,SRLI,SRAI,LB,LBU,LH,LHU,LW,LWU,LD,
ADDIW,SLLIW,SRLIW,SRAIW
};
const INSTRUCTIONS b_type_instructions[]={
    BEQ,BNE,BLT,BLTU,BGE,BGEU,
};
const INSTRUCTIONS s_type_instructions[]={
    SB,SH,SW,SD,
}